@page "/learnblazor/blazorJs"
@inject IJSRuntime _JSRuntime

<h3>BlazorJs</h3>

<div class="row mt-2">
    <button class="btn btn-secondary" @onclick="TestConfirmBox">Test Confirm Box</button>
</div>

<div class="row mt-2">
    <div class="col-sm-6">
        <button class="btn btn-success w-100" @onclick="TestSuccess">Success Message</button>
    </div>
    <div class="col-sm-6">
        <button class="btn btn-danger w-100" @onclick="TestError">Error Message</button>
    </div>
</div>

<div class="row mt-2">
    <div class="col-sm-6">
        <button class="btn btn-success" @onclick="SweetSuccess">Success Alert</button>
    </div>
    <div class="col-sm-6">
        <button class="btn btn-danger" @onclick="SweetError">Error Alert</button>
    </div>
</div>

<div class="row">
    @if (ConfirmResult)
    {
        <p>Confirmation has been made</p>
    }
    else
    {
        <p>Confirmation Pending</p>
    }
</div>

@code {
    private string ConfirmMessage = "Are you sure you want to click?";

    private bool ConfirmResult { get; set; }

    private async Task TestConfirmBox()
    {
        ConfirmResult = await _JSRuntime.InvokeAsync<bool>("confirm", ConfirmMessage);
    }

    private async Task TestSuccess()
    {
        await _JSRuntime.ToastrSuccess("This is success message demo");
    }

    private async Task TestError()
    {
        await _JSRuntime.ToastrError("This is error message demo");
    }

    private async Task SweetSuccess()
    {
        await _JSRuntime.InvokeVoidAsync("SweetAlert", "success", "This is demo success message");
    }

    private async Task SweetError()
    {
        await _JSRuntime.InvokeVoidAsync("SweetAlert", "error", "This is demo error message");
    }
}
