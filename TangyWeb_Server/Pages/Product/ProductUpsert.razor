@page "/product/create"
@page "/product/edit/{id:int}"

@inject ICategoryRepository _categoryRepository
@inject IProductRepository _productRepository
@inject NavigationManager _NavManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime

<div class="row my-2">
    <div class="col-md-10">
        <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>
        @if (IsLoading)
        {
            <div class="d-flex align-items-center justify-content-center">
                <div class="lds-default"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                @*<ValidationSummary />*@

                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control w-50"></InputText>
                    <ValidationMessage For="() => Product.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control w-50"></InputText>
                    <ValidationMessage For="() => Product.Color"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <InputTextArea class="form-control" @bind-Value="Product.Description"></InputTextArea>
                    
                    <ValidationMessage For="() => Product.Description"></ValidationMessage>
                </div>
                <div class="row pt-3">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Shop Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Customer Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <label>Category</label>
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected>--Select Category--</option>
                            @foreach(var cat in Categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Product.CategoryId"></ValidationMessage>
                    </div>
                    <div class="form-group col-6 pt-4">
                        <InputFile OnChange="HandleImageUpload"></InputFile>
                    </div>
                </div>
                <div class="form-group py-2">
                    <button type="submit" class="btn btn-success me-2">@Title</button>
                    <NavLink href="/products" class="btn btn-secondary">Back to List</NavLink>
                </div>
            </EditForm>
        }

    </div>

    <div class="col-md-2">
        <img src="@Product.ImageUrl" class="w-100" />
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private string Title { get; set; } = "Create";

    private ProductDTO Product { get; set; } = new()
    {
        ImageUrl = "/images/default.png"
    };

    public string OldImageUrl { get; set; }
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();

    private bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if(id != 0)
        {
            //Update
            Title = "Update";
            Product = await _productRepository.Get(id);

        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            // Create 
            await _productRepository.Create(Product);
            await _jsRuntime.ToastrSuccess("Product created successfully");
        }
        else
        {
            // Update
            if(OldImageUrl != Product.ImageUrl)
            {
                _fileUpload.DeleteFile(OldImageUrl);
            }
            await _productRepository.Update(Product);
            await _jsRuntime.ToastrSuccess("Product updated successfully");
        }

        _NavManager.NavigateTo("products");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if(e.GetMultipleFiles().Count > 0)
            {
                foreach(var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if(fileInfo.Extension.ToLower() == ".jpg" || 
                       fileInfo.Extension.ToLower() == ".png" || 
                       fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        Product.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }
            }
            IsLoading = false;
        }
        catch(Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);   
        }
    }
}