@page "/category"
@inject ICategoryRepository _ICategoryRepository
@inject IJSRuntime _IJSRuntime

<DeleteModal IsParentComponentProcessing="Loading" OnButtonClick="ConfirmDeleteClicked"></DeleteModal>

<div class="row mt-4">
    <div class="col-lg-6">
        <h1>Category List</h1>
    </div>
    <div class="col-lg-4 offset-2">
        <a href="/category/create" class="btn btn-primary form-control">Create Category</a>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        @if(Loading)
        {
            <div class="d-flex align-items-center justify-content-center">
                <div class="lds-default"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            </div>
        } 
        else { 

        @if (Categories.Any())
        {
            <table class="table table-bordered table-light">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var category in Categories)
                    {
                        <tr>
                            <td>@category.Name</td>
                                <td>
                                    <NavLink href="@($"/category/edit/{category.Id}")" class="btn btn-primary">Edit</NavLink>
                                    <button class="btn btn-danger" @onclick="() => DeleteCategory(category.Id)">Delete</button>
                                </td>
                        </tr>
                    }
                </tbody>
            </table>
            }
            else
            {
                <div class="alert alert-info"> There are no records </div>
            }
        }
        
    </div>
</div>
@code {
    private IEnumerable<CategoryDTO> Categories = new List<CategoryDTO>();

    private DeleteModal deleteModal;

    private bool Loading { get; set; }

    private int DeleteCategoryId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }

    }

    private async Task LoadCategories()
    {
        Loading = true;
        StateHasChanged();
        Categories = await _ICategoryRepository.GetAll();
        Loading = false;
        StateHasChanged();
    }

    private async Task DeleteCategory(int id)
    {
        DeleteCategoryId = id;
        await _IJSRuntime.InvokeVoidAsync("showDeleteDialog",DeleteCategoryId);
    }

    public async Task ConfirmDeleteClicked(bool isConfirmed)
    {
        Loading = true;
        if (isConfirmed && DeleteCategoryId != 0)
        {
            await _ICategoryRepository.Delete(DeleteCategoryId);
            await LoadCategories();
            await _IJSRuntime.InvokeVoidAsync("hideDeleteDialog");
        }
        Loading = false;
    }
}
